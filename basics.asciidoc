
== Basics


=== Read Eval Print Loop: REPL

Just type `scala` on the Command Line shell:

-----------------------------------
$ scala
Welcome to Scala version 2.10.3 (OpenJDK 64-Bit Server VM, Java 1.7.0_51).
Type in expressions to have them evaluated.
Type :help for more information.

scala> 
-----------------------------------

Sample REPL session

[source,scala]
-----------------------------------
scala> val (x,y) = (10,20)
x: Int = 10
y: Int = 20

scala> println(x + y)
30

scala> 
-----------------------------------

=== Entry point for a Scala Program

**Hello Scala World**


Here we create a Scala Object named `HelloWorld` with a `main` method.

[source,scala]
-----------------------------------
object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello Scala World!")
  }
}
-----------------------------------

Note the `main` method definition very carefully. It takes an `Array` of `String` values as the only argument. It returns `Unit` which is same as `void` in Java or C++, in other words, `main` method returns nothing.

**Compile and run Hello Scala World**

-------------------------
$ scalac helloworld.scala
$ ls
helloworld.scala
HelloWorld.class
HelloWorld$.class
$ scala HelloWorld
Hello Scala World!
-------------------------

So, that is our first Scala program.

=== Values and Variables

Scala is a type-safe as well as statically-typed. To illustrate this, let us consider an example in Ruby ( or maybe Python ), which is a dynamically typed language:

[source,ruby]
-------------------------------------
$ irb
>> counter = Counter.new
>> counter = AtomicCounter.new
>> counter = File.new # this works here!
-------------------------------------

The above code works in Scala, but it won't work in Scala. Scala's static type system, avoids runtime overhead of dynamic types. Also, the method dispatch is fast in a statically typed language.

[source,scala]
---------------------------------------------------------
var x = new Counter()
x: Counter = some-counter-instance // x's type is inferred as Counter

x = new AtomicCounter() // this will work because AtomicCounter is also a Counter
x = new File() // this doesn't work in Scala, because File is not a Counter
---------------------------------------------------------


=== Data Types

**Almost everything is same as Java**

Basic Data Types: ( all integers are signed two's complement )

 * Integers: _Byte_ (8bit), _Short_ (16bit), _Int_ (32bit), _Long_ (64bit)
 * _Char_ (16 bit unicode character), _String_ (squence of Chars)
 * Reals: _Float_ (32bit), _Double_ (64bit) * _Boolean_: true / false

Literals:

 * Basic data types: `1`, `0.123`, `12L`, `'a'`, `"String"`
 * Symbol literal: `'identifier`

=== Data Containers

 * Array
 * List
 * Set
 * Map
 * **Tuple**

=== Programming Abstraction Tools

 * Class
 * Object
 * Scala App
 * Package

=== Expressions

Every thing is an expression

 * Basic expression: `1+2`
 * An assignment is an expression
 * A function is an expression

=== Packages

Example: `pacakge-example.scala`

[source,scala]
-------------------------------------------
package in.tuxdna.scala
class Employee(name: String, age: Int) {
  override def toString = name + ", " + age
}

object Main extends App {
  val emp1 = new Employee("Tom", 21)
  println("Employee 1: "+emp1)
}
-------------------------------------------

Output:

------------------------------
$ scalac pacakge-example.scala
$ scala in.tuxdna.scala.Main
Employee 1: Tom, 21
------------------------------

=== Using Scala as a scripting language

Example: `employee.scala`

[source,scala]
----------------------------------
class Employee(name: String, age: Int) {
  override def toString = name + ", " + age
}

val emp1 = new Employee("Tom", 21)
println("Employee 1: "+emp1)

----------------------------------

Ouptput:

----------------------
$ scala employee.scala
Employee 1: Tom, 21
----------------------


