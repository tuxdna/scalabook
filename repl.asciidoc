== Read Eval Print Loop: REPL

Scala REPL Examples

Function

---------------------------------------------------------------------------
scala> def fact(n: Int) = (1 to n).foldLeft(0)( (a,b) => a * b)
fact: (n: Int)Int

scala> val factorial = fact(_)
factorial: Int => Int = <function1>

scala> val f1 = (n: Int) =>  (1 to n).foldLeft(0)( (a,b) => a * b) 
f1: Int => Int = <function1>

scala> factorial
res2: Int => Int = <function1>

scala> val f2 = (n: Int, m: Int) =>  (m to n).foldLeft(0)( (a,b) => a * b) 
f2: (Int, Int) => Int = <function2>
---------------------------------------------------------------------------

Map

----------------------------------------------------------------------------------------------
scala> (1 to 10) map { _ * 2 }
res61: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
----------------------------------------------------------------------------------------------

Reduce

------------------------------------
scala> (1 to 10) reduceLeft{ _ + _ }
res63: Int = 55
------------------------------------

Fold

------------------------------------
scala> (1 to 10).foldLeft(0)(_ + _)
res68: Int = 55

scala> (1 to 10).foldLeft(1)(_ * _)
res69: Int = 3628800

scala> (1 to 10).foldRight(1)(_ * _)
res70: Int = 3628800
------------------------------------

Factorial

------------------------------------------------------
scala> def fact(n: Int) = (1 to n).foldRight(1)(_ * _)
fact: (n: Int)Int

scala> fact(10)
res71: Int = 3628800

scala> fact(3)
res72: Int = 6

scala> fact(20)
res73: Int = -2102132736
------------------------------------------------------

Sum

-----------------------------------------------------------------------------------
scala> (1 to 10).sum
res74: Int = 55

scala> val wordList = List("scala", "akka", "play framework", "sbt", "typesafe")
wordList: List[java.lang.String] = List(scala, akka, play framework, sbt, typesafe)

scala> val tweet = "This is an example tweet talking about scala and sbt."
tweet: java.lang.String = This is an example tweet talking about scala and sbt.

scala> (wordList.foldLeft(false)( _ || tweet.contains(_) ))
res75: Boolean = true

scala> wordList.exists(tweet.contains)
res76: Boolean = true
-----------------------------------------------------------------------------------

File IO

-----------------------------------------------------------------------------------------------------
scala> val fileText = io.Source.fromFile("/proc/cpuinfo").mkString
fileText: String = 
"processor  : 0
vendor_id   : GenuineIntel
..."

scala> val fileText = io.Source.fromFile("/proc/cpuinfo").getLines.toList
fileText: List[String] = List(processor : 0, vendor_id  : GenuineIntel, cpu family  : 6, model      : 42, model name    : Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz, stepping : 7, microcode  : 0x1b, cpu MHz     : 3101.000, cache size  : 6144 KB, physical id  : 0, siblings   : 4, core id        : 0, cpu cores  : 4, apicid     : 0, initial apicid : 0, fpu        : yes, fpu_exception    : yes, cpuid level  : 13, wp        : yes, flags        : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dthe...
-----------------------------------------------------------------------------------------------------

`if` expression

-----------------------------------------------------------------------------------------------------
scala> (1 to 4).map { i => "Happy Birthday " + (if (i == 3) "dear UNIX" else "to You") }.foreach { println }
Happy Birthday to You
Happy Birthday to You
Happy Birthday dear UNIX
Happy Birthday to You
-----------------------------------------------------------------------------------------------------

List partition

-------------------------------------------------------------------------------
scala> val (passed, failed) = List(49, 58, 76, 82, 88, 90) partition ( _ > 60 )
passed: List[Int] = List(76, 82, 88, 90)
failed: List[Int] = List(49, 58)
-------------------------------------------------------------------------------

XML

-----------------------------------------------------------------------------------------------------
scala> val results = xml.XML.load("https://github.com/blog.atom")
results: scala.xml.Elem = 
<feed xml:lang="en-US" xmlns:media="http://search.yahoo.com/mrss/" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:github.com,2008:/blog</id>
  <link href="https://github.com/blog" type="text/html" rel="alternate"></link>
  <link href="https://github.com/blog.atom" type="application/atom+xml" rel="self"></link>
  <title>The GitHub Blog</title>
  <updated>2013-05-31T14:32:29-07:00</updated>
  <entry>
    <id>tag:github.com,2008:Post/1518</id>
    <published>2013-05-31T14:32:29-07:00</published>
    <updated>2013-05-31T14:32:29-07:00</updated>
    <link href="https://github.com/blog/1518-drinkup-in-atlanta" type="text/html" rel="alternate"></link>
    <title>Drinkup in Atlanta</title>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/wfarr&quo...
-----------------------------------------------------------------------------------------------------

Min-Max

------------------------------------------------------
scala> List(14, 35, -7, 46, 98).reduceLeft ( _ min _ )
res79: Int = -7

scala> List(14, 35, -7, 46, 98).reduceLeft ( _ max _ )
res80: Int = 98

scala> List(14, 35, -7, 46, 98).min
res81: Int = -7

scala> List(14, 35, -7, 46, 98).max
res82: Int = 98
------------------------------------------------------

