== Reactive Programming

http://reactivemanifesto.org/

Reactive Manifesto defines a common vocabulary for basic challenges for a modern system that:

 * it must react to its users (responsiveness)
 * it must react to failure and stay available (resilience)
 * it must react to variable load conditions (scalability)
 * it must react to events (event orientation)

Pre-requisites: `map`, `flatMap`, generic definition `[T]`


**Reactive Programming in Scala**

Four Effects on operations:

**Synchronous**

 * one: `T`/`Try[T]`
 * many: `Iterable[T]`

**Asynchronous**

 * one: `Future[T]`
 * many: `Observable[T]`

=== Try

**What does a Try do?**

`Try[T]`: Handle happy path as well as sad path

 * `Success[T]` - happy path
 * `Failure(Throwable)`: sad path

**Higher order functions on `Try[T]`**

--------------------------------------------------------------
def flatMap[S](f: T=>Try[S]): Try[S]
def flatten[U <: Try[T]]: Try[U]
def map[S](f: T=>S): Try[T]
def filter(p: T=>Boolean): Try[T]
def recoverWith(f: PartialFunction[Throwable, Try[T]]): Try[T]
--------------------------------------------------------------

=== Future

`Future[T]`:

It represents a possibly asynchronous execution

=== Promise

`Promise[T]`

=== Some examples

Partial examples of: `Future { block }`, `onComplete`, `recover`, `recoverWith`, `fallbackTo`, `async`, `await`

[source,scala]
-----------------------------------------------------------------------------------
val f1 = Future { block1; 0 }
val f2 = Future { block2; 1 }
f1 recover { case x: Throwable => 2 }
f1 recoverWith { case x: Throwable => 3 }
f1 onComplete {
  case Success(x) => x
  case Failure(t) => println("caused by :"+t)
}
f2 onSuccess { v =>
  println("Success with: "+v)
}
f2 onFailure { t =>
  println("caused by: "+t)
}
val op1 = Future { operation1 }
// val op2 = Future { nextOperation(x) }
op1.flatMap( x => Future { nextOperation(x) } )

val f3 = op1 fallbackTo {
  async {
    await { nextOperation(x) }
  }
} recover {
  case e: Op1Error => println("op1 failed because: "+e)
}

val res = Await.result(f3, 5 seconds) // wait for at most 5 seconds for computation
-----------------------------------------------------------------------------------

== Observable

An **Observable** is the entity which will be emit data. An **Observer** is the entity which will receive notificaions whenever an **Observable** emits data. **Observer** is connected to an **Observable** via a **Subscription**. Observable can be a Hot or Cold. **Hot Observable** starts emitting values as soon as it is created and it is shared by all the subscriptions. **Cold Observable** emits values only when an Observer subscribes to it. Each subscriber has its own copy of observable.

An **Observable** is also referred to as **Subject**.

 * AsyncSubject - caches final value
 * PublishSubject - current value
 * ReplaySubject - caches all values
 * BehaviourSubject - caches latest value


Blocking observables

[source,scala]
-----------------------------------------------------------------------------------
Observable.toBlockingObservable()
BlockingObservable.from()
-----------------------------------------------------------------------------------


Why to use Observable?

 * Future is cumbursome when dealing with errors.
 * Future is not suitable for bulk operations or a stream of data.
 * Observable is more suitable for bulk operations.

How do we handle backpressure with Observable? Read https://github.com/Netflix/RxJava/wiki/Backpressure[ how to do it.]

A subscriber can also be `unsubscribe()` d. This doesn't affect the emmision of data from Observable, rather it only disconnects the subscription.

[source,scala]
-----------------------------------------------------------------------------------
val obs = Observable.from(sequence)
val sequentialOutput = obs.concat
val streamingOutput = obs.faltten

streamingOutput.subscribe(x => println(x))

blocking: Seq[T]) => Seq[T]

async: Seq[T] => Future[Seq[T]]

nonBlocking: Seq[T] => Future[Seq[T]]

streaming: Seq[T] => Observable[T]


-----------------------------------------------------------------------------------


Algebra of subscription.

 * CompositeSubscription
 * MultiAsignment




Read more at:

 * http://docs.scala-lang.org/overviews/core/futures.html
 * http://tersesystems.com/2012/12/27/error-handling-in-scala/
 * http://alvinalexander.com/scala/future-example-scala-cookbook-oncomplete-callback
 * https://github.com/Netflix/RxJava/wiki/Observable
 * http://channel9.msdn.com/Events/TechEd/Europe/2012/DEV413

