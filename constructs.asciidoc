
== Basic program constructs


* if-else expression
* loops: for comprehension
* pattern matching
* exception handling

'''''

=== if-else

-------------------------------------------------------------------------
!scala
scala> import java.util.Calendar
import java.util.Calendar

scala> val now = Calendar.getInstance()
now: java.util.Calendar = java.util.GregorianCalendar[time=1392732373004,
  areFieldsSet=true,areAllFieldsSet=true,lenient=true,
  zone=sun.util.calendar.ZoneInfo[id="Asia/Kolkata",offset=19800000,
  dstSavings=0,useDaylight=false,transitions=6,lastRule=null],
  firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,
  WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=49,
  DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,
  MINUTE=36,SECOND=13,MILLISECOND=4,ZONE_OFFSET=19800000,DST_OFFSET=0]

scala> val hour = now.get(Calendar.HOUR_OF_DAY)
hour: Int = 19

scala> println( if(hour < 12) "good afternoon" else "good morning")
good morning
-------------------------------------------------------------------------

=== Loops

--------------------------------------------------------------------------------
!scala
scala> val numbers = (1 to 10) toList
numbers: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> for(n <- numbers) print(n + " ")
1 2 3 4 5 6 7 8 9 10 

scala> var index = 0
index: Int = 0

scala> while(index < numbers.length) { print(numbers(index) + " "); index += 1 }
1 2 3 4 5 6 7 8 9 10 
--------------------------------------------------------------------------------

'''''

=== Pattern matching

------------------------------------------------
!scala
scala> val dow = now.get(Calendar.DAY_OF_WEEK)
dow: Int = 3

scala> dow match {
        case 1 => "Sunday"
        case 2 => "Monday"
        case 3 => "Tuesday"
        case 4 => "Wednesday"
        case 5 => "Thursday"
        case 6 => "Friday"
        case 7 => "Saturday"
      }
res20: java.lang.String = Tuesday

scala> dow match {
        case x if x == 1  || x == 7 => "Weekend"
        case _ => "Workday"
      }
res21: java.lang.String = Workday
------------------------------------------------

=== Exception handling

-------------------------------------------------------------------
!scala
scala> var divisor = 0
divisor: Int = 0

scala> def divide(n: Int) = 1 / divisor
divide: (n: Int)Int

scala> def divide(n: Int) = n / divisor
divide: (n: Int)Int

scala> try { divide(10) } catch {
         case e: ArithmeticException => "Check your calculations!" 
       }
res34: Any = Check your calculations!

scala> divisor = 2
divisor: Int = 2

scala> try { divide(10) } catch {
         case e: ArithmeticException => "Check your calculations!"
       }
res35: Any = 5
-------------------------------------------------------------------

