
== Basic program constructs

=== Control Constructs

Control Constructs in Scala

 * if-else expression
 * loops: for comprehension, while, do-while
 * pattern matching: match-case
 * exception handling: try-catch-finally

=== if-else

[source,scala]
----
scala> import java.util.Calendar
scala> val now = Calendar.getInstance()
scala> val hour = now.get(Calendar.HOUR_OF_DAY)
hour: Int = 19

scala> println( if(hour < 12) "good afternoon" else "good morning")
good morning

scala> (1 to 4).map { i => "Happy Birthday " + (if (i == 3) "dear UNIX" else "to You") }.foreach { println }
Happy Birthday to You
Happy Birthday to You
Happy Birthday dear UNIX
Happy Birthday to You
----

=== Loops

[source,scala]
--------------------------------------------------------------------------------
scala> val numbers = (1 to 10) toList
numbers: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> for(n <- numbers) print(n + " ")
1 2 3 4 5 6 7 8 9 10 

scala> var index = 0
index: Int = 0

scala> while(index < numbers.length) { print(numbers(index) + " "); index += 1 }
1 2 3 4 5 6 7 8 9 10 
--------------------------------------------------------------------------------

=== Pattern matching

Simple pattern matching

[source,scala]
------------------------------------------------
scala> val dow = now.get(Calendar.DAY_OF_WEEK)
dow: Int = 3

scala> dow match {
        case 1 => "Sunday"
        case 2 => "Monday"
        case 3 => "Tuesday"
        case 4 => "Wednesday"
        case 5 => "Thursday"
        case 6 => "Friday"
        case 7 => "Saturday"
      }
res20: java.lang.String = Tuesday

scala> dow match {
        case x if x == 1  || x == 7 => "Weekend"
        case _ => "Workday"
      }
res21: java.lang.String = Workday
------------------------------------------------


Pattern matching with regexes:

[source,scala]
-------------------------------------------------------------------
val text =
     """|Hello Scala World
        |Scala is a wonderful language
        |OO + FP make Scala wonderful
        |You should also try Scala""".stripMargin('|')

val nextToScala = """.*\bScala (\w+).*""".r

//> nextToScala: scala.util.matching.Regex = .*\bScala (\w+).*

for (line <- text.split("\n")) yield line match {
    case nextToScala(w) => w
    case _ => ""
}
//> res0: Array[String] = Array(World, is, wonderful, "")
-------------------------------------------------------------------

=== Exception handling

[source,scala]
-------------------------------------------------------------------
scala> var divisor = 0
divisor: Int = 0

scala> def divide(n: Int) = 1 / divisor
divide: (n: Int)Int

scala> def divide(n: Int) = n / divisor
divide: (n: Int)Int

scala> try { divide(10) } catch {
         case e: ArithmeticException => "Check your calculations!" 
       }
res34: Any = Check your calculations!

scala> divisor = 2
divisor: Int = 2

scala> try { divide(10) } catch {
         case e: ArithmeticException => "Check your calculations!"
       }
res35: Any = 5
-------------------------------------------------------------------

